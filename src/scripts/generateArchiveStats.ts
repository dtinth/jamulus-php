import { Env } from "@(-.-)/env";
import * as fs from "fs";
import * as path from "path";
import { z } from "zod";

const env = Env(
  z.object({
    STORAGE_ENDPOINT: z.string(),
    STORAGE_BUCKET: z.string(),
    STORAGE_NS: z.string(),
  })
);

/**
 * Generate a date string YYYY-MM-DD for a given day offset from today
 */
function getDateString(daysAgo: number): string {
  const date = new Date();
  date.setDate(date.getDate() - daysAgo);
  return date.toISOString().slice(0, 10);
}

/**
 * Check if a file exists by making a HEAD request
 */
async function fileExists(url: string): Promise<boolean> {
  try {
    const response = await fetch(url, { method: "HEAD" });
    return response.ok;
  } catch (error) {
    return false;
  }
}

/**
 * Download and process a file to get size information
 */
async function getFileSizeInfo(
  url: string
): Promise<{ compressedSize: number; uncompressedSize: number }> {
  const response = await fetch(url);
  if (!response.ok) {
    throw new Error(`HTTP error: ${response.status}`);
  }
  if (!response.body) {
    throw new Error("Response body is null");
  }
  const compressedSize = +response.headers.get("Content-Length")!;
  let uncompressedSize = 0;
  for await (const chunk of response.body) {
    uncompressedSize += chunk.length;
  }
  return { compressedSize, uncompressedSize };
}

/**
 * Calculate the number of days between two dates
 */
function daysBetween(startDate: string, endDate: string): number {
  const start = new Date(startDate);
  const end = new Date(endDate);
  const diffTime = Math.abs(end.getTime() - start.getTime());
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
}

/**
 * Generate the archive stats markdown file
 */
async function generateArchiveStats() {
  // Find the latest snapshot by checking today, yesterday, and the day before
  let latestSnapshotDate: string | null = null;
  let latestSnapshotUrl: string | null = null;

  for (let daysAgo = 0; daysAgo < 3; daysAgo++) {
    const date = getDateString(daysAgo);
    const month = date.slice(0, 7);
    const objectName = `${env.STORAGE_NS}/daily/${month}/${date}.ndjson.br`;
    const url = `https://${env.STORAGE_BUCKET}.${env.STORAGE_ENDPOINT}/${objectName}`;

    console.log(`Checking if snapshot exists for ${date}...`);
    const exists = await fileExists(url);

    if (exists) {
      console.log(`Found latest snapshot for ${date}`);
      latestSnapshotDate = date;
      latestSnapshotUrl = url;
      break;
    }
  }

  if (!latestSnapshotDate || !latestSnapshotUrl) {
    console.error("Could not find any snapshot in the last 3 days");
    process.exit(1);
  }

  // Download and calculate sizes
  console.log(`Downloading and analyzing ${latestSnapshotUrl}...`);
  const { compressedSize, uncompressedSize } = await getFileSizeInfo(
    latestSnapshotUrl
  );

  // Format sizes in human-readable format
  const formatBytes = (bytes: number): string => {
    const units = ["B", "KB", "MB", "GB", "TB"];
    let size = bytes;
    let unitIndex = 0;

    while (size >= 1024 && unitIndex < units.length - 1) {
      size /= 1024;
      unitIndex++;
    }

    return `${size.toFixed(2)} ${units[unitIndex]}`;
  };

  // Calculate number of days since the first available snapshot (2023-08-01)
  const firstSnapshotDate = "2023-08-01";
  const totalDays = daysBetween(firstSnapshotDate, latestSnapshotDate) + 1; // +1 to include the first day

  // Generate the markdown content
  const objectName = latestSnapshotUrl.split("/").slice(-3).join("/");
  const content = `# Jamulus Server List Archive Statistics

The archive contains ${totalDays} daily snapshots since ${firstSnapshotDate}.

## Latest Daily Snapshot

- **Date**: ${latestSnapshotDate}
- **URL**: [${objectName}](${latestSnapshotUrl})
- **Compressed Size**: ${formatBytes(
    compressedSize
  )} (${compressedSize.toLocaleString()} bytes)
- **Uncompressed Size**: ${formatBytes(
    uncompressedSize
  )} (${uncompressedSize.toLocaleString()} bytes)

---

This file is automatically generated during the daily archive consolidation process.
For more information about the archive, see [ARCHIVE.md](ARCHIVE.md).
`;

  // Write the markdown file
  fs.writeFileSync(path.join(process.cwd(), "ARCHIVE_STATS.md"), content);
  console.log(`Generated ARCHIVE_STATS.md successfully`);
}

// Run the function
generateArchiveStats().catch((err) => {
  console.error("Error generating archive stats:", err);
  process.exit(1);
});
